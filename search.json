[{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://xqnwang.github.io/conformalForecast/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"data-simulation","dir":"Articles","previous_headings":"","what":"Data simulation","title":"Introduction to conformalForecast","text":"Suppose interested forecasting time series data generated AR(2) model ϕ1=0.8\\phi_1 = 0.8, ϕ2=−0.5\\phi_2=-0.5, σ2=1\\sigma^2 = 1.","code":"set.seed(0) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1)) autoplot(series) +   labs(     title = \"Time series generated from an AR(2) model\",     ylab = \"\"   ) +   theme_bw()"},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"time-series-cross-validation","dir":"Articles","previous_headings":"","what":"Time series cross-validation","title":"Introduction to conformalForecast","text":"first train forecasting model AR(2) rolling forecast origin generate forecasts forecast errors validation sets.","code":"far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |> forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, window = 100, initial = 1) summary(fc) #> Cross-validation #>  #> Call: #>  cvforecast(y = series, forecastfun = far2, h = 3, level = c(80,   #>      95), forward = TRUE, initial = 1, window = 100)  #>  #>  fit_times = 901 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95 #> 1001      0.1430927 -1.317635 1.603821 -2.090898 2.377083 #> 1002     -0.3763649 -2.181868 1.429138 -3.137644 2.384914 #> 1003     -0.5230650 -2.328976 1.282846 -3.284968 2.238838 #>  #> Cross-validation error measures: #>        ME   MAE   MSE  RMSE    MPE   MAPE  MASE RMSSE Winkler_95 MSIS_95 #> CV -0.018 0.972 1.506 1.102 36.202 218.01 0.947 0.866      5.765   5.616 fc |>   autoplot() +   labs(     title = \"Forecasts produced using an AR(2) model\",     ylab = \"\"   ) +   theme_bw() (fc_score <- accuracy(fc, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   4.784124 4.659562 #> CV h=2   6.247227 6.090071 #> CV h=3   6.269019 6.105162 (fc_cov <- coverage(fc, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9544444 0.9421580 0.9354120 (fc_wid <- width(fc, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 3.915949 4.999164 5.049476  #>  #> Median width: #>      h=1      h=2      h=3  #> 3.885016 4.919813 4.957593"},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"conformal-prediction","dir":"Articles","previous_headings":"","what":"Conformal prediction","title":"Introduction to conformalForecast","text":"Based forecast errors validation sets, can train various conformal prediction methods obtain distribution-free uncertainty estimation.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"classical-split-conformal-prediction-scp","dir":"Articles","previous_headings":"Conformal prediction","what":"Classical split conformal prediction (SCP)","title":"Introduction to conformalForecast","text":", perform SCP method equal weights sample quantile estimation. scp() function allows us include non-equal weights sample quantile estimation passing weight calculation function weightfun argument.","code":"scpfc <- scp(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,              weightfun = NULL, kess = FALSE, quantiletype = 1)  (scpfc_score <- accuracy(scpfc, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   5.003118 4.830704 #> CV h=2   6.527138 6.302017 #> CV h=3   6.635156 6.403022 (scpfc_cov <- coverage(scpfc, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9500000 0.9473684 0.9396985 (scpfc_wid <- width(scpfc, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 4.114655 5.368746 5.403647  #>  #> Median width: #>      h=1      h=2      h=3  #> 4.054006 5.334842 5.326651 expweight <- function(n) 0.99^{n+1-(1:n)} scpfc_exp <- scp(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,                  weightfun = expweight, kess = FALSE, quantiletype = 1)  (scpfc_exp_score <- accuracy(scpfc_exp, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   5.108981 4.930413 #> CV h=2   6.563368 6.336281 #> CV h=3   6.615147 6.381920 (scpfc_exp_cov <- coverage(scpfc_exp, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9550000 0.9548872 0.9484925 (scpfc_exp_wid <- width(scpfc_exp, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 4.322785 5.567499 5.585576  #>  #> Median width: #>      h=1      h=2      h=3  #> 4.297306 5.455463 5.499007"},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"adaptive-conformal-prediction-acp","dir":"Articles","previous_headings":"Conformal prediction","what":"Adaptive conformal prediction (ACP)","title":"Introduction to conformalForecast","text":"ACP method uses online update α\\alpha perform calibration can achieve either approximate exact marginal coverage.","code":"acpfc <- acp(fc, symmetric = FALSE, gamma = 0.005, ncal = 100, rolling = TRUE)  (acpfc_score <- accuracy(acpfc, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   5.036517 4.863717 #> CV h=2   6.644759 6.416735 #> CV h=3   6.785646 6.551065 (acpfc_cov <- coverage(acpfc, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9487500 0.9498747 0.9497487 (acpfc_wid <- width(acpfc, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 4.119178 5.420955 5.635120  #>  #> Median width: #>      h=1      h=2      h=3  #> 4.034989 5.426268 5.499007"},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"conformal-pid-control-pid","dir":"Articles","previous_headings":"Conformal prediction","what":"Conformal PID control (PID)","title":"Introduction to conformalForecast","text":"PID method combines three modules (quantile tracking, error integration, scorecasting) make iteration produce sequence quantile estimates used prediction sets.","code":"# PID setup Tg <- 1000; delta <- 0.01 Csat <- 2 / pi * (ceiling(log(Tg) * delta) - 1 / log(Tg)) KI <- 2 lr <- 0.1 # PID without scorecaster pidfc_nsf <- pid(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,                  integrate = TRUE, scorecast = FALSE,                  lr = lr, KI = KI, Csat = Csat)  (pidfc_nsf_score <- accuracy(pidfc_nsf, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   5.122446 4.948241 #> CV h=2   6.760180 6.529263 #> CV h=3   6.962396 6.718390 (pidfc_nsf_cov <- coverage(pidfc_nsf, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9437500 0.9461153 0.9447236 (pidfc_nsf_wid <- width(pidfc_nsf, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 4.129826 5.443648 5.878857  #>  #> Median width: #>      h=1      h=2      h=3  #> 4.051401 5.450223 5.748390 # PID with a Naive method as the scorecaster naivefun <- function(x, h) {   naive(x) |> forecast(h = h) } pidfc <- pid(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,              integrate = TRUE, scorecast = TRUE, scorecastfun = naivefun,              lr = lr, KI = KI, Csat = Csat)  (pidfc_score <- accuracy(pidfc, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   7.127771 6.889720 #> CV h=2   9.341393 9.032121 #> CV h=3  10.042744 9.711128 (pidfc_cov <- coverage(pidfc, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9387500 0.9411028 0.9409548 (pidfc_wid <- width(pidfc, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 6.004732 7.686964 7.618278  #>  #> Median width: #>      h=1      h=2      h=3  #> 5.972480 7.664302 7.656036"},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"multistep-ahead-conformal-prediction-mcp","dir":"Articles","previous_headings":"Conformal prediction","what":"Multistep-ahead conformal prediction (MCP)","title":"Introduction to conformalForecast","text":"Similar PID method, MCP method also integrates three modules (P, , D) form final iteration. However, instead performing conformal prediction individual forecast horizon hh separately, MCP employs combination MA(h−1h-1) model linear regression model et+h|te_{t+h|t} et+h−1|t,…,et+1|te_{t+h-1|t},\\dots,e_{t+1|t} scorecaster. allows MCP method capture relationship hh-step ahead forecast error past errors.","code":"mcpfc <- mcp(fc, ncal = 100, rolling = TRUE, integrate = TRUE, scorecast = TRUE,              lr = lr, KI = KI, Csat = Csat)  (mcpfc_score <- accuracy(mcpfc, byhorizon = TRUE)) #>        Winkler_95  MSIS_95 #> CV h=1   5.159843 4.984948 #> CV h=2   6.664827 6.437713 #> CV h=3   6.904946 6.662531 (mcpfc_cov <- coverage(mcpfc, window = 100, level = 95)) #>       h=1       h=2       h=3  #> 0.9437500 0.9473684 0.9447236 (mcpfc_wid <- width(mcpfc, window = 100, level = 95, includemedian = TRUE)) #> Mean width: #>      h=1      h=2      h=3  #> 4.134144 5.601782 5.796113  #>  #> Median width: #>      h=1      h=2      h=3  #> 4.068763 5.561382 5.562705"},{"path":"https://xqnwang.github.io/conformalForecast/articles/conformalForecast.html","id":"coverage-and-width-of-prediction-intervals","dir":"Articles","previous_headings":"","what":"Coverage and width of prediction intervals","title":"Introduction to conformalForecast","text":"Taking MCP result example, now show average coverage validation sets.  can also show rolling average interval width validation sets.  can also combine results show one single plot.","code":"mcpfc_cov$rollmean |>   as_tsibble() |>   mutate(horizon = key, coverage = value) |>   update_tsibble(key = horizon) |>   select(-c(key, value)) |>   ggplot(aes(x = index, y = coverage, group = horizon)) +   geom_line() +   geom_hline(yintercept = 0.95, linetype = \"dashed\", color = \"blue\") +   facet_grid(horizon~., scales = \"free_y\") +   xlab(\"Time\") +   ylab(\"Rolling mean coverage for MCP\") +   theme_bw() mcpfc_wid$rollmean |>   as_tsibble() |>   mutate(horizon = key, width = value) |>   update_tsibble(key = horizon) |>   select(-c(key, value)) |>   ggplot(aes(x = index, y = width, group = horizon)) +   geom_line() +   facet_grid(horizon~., scales = \"free_y\") +   xlab(\"Time\") +   ylab(\"Rolling mean width for MCP\") +   theme_bw() candidates <- c(\"fc\", \"scpfc\", \"scpfc_exp\", \"acpfc\", \"pidfc_nsf\", \"pidfc\", \"mcpfc\") methods <- c(\"AR\", \"SCP\", \"WCP\", \"ACP\", \"PI\", \"PID\", \"MCP\") for (i in 1:length(candidates)) {   out <- get(paste0(candidates[i], \"_cov\"))   out_pivot <- out$rollmean |>     as_tsibble() |>     mutate(horizon = key, coverage = value) |>     update_tsibble(key = horizon) |>     select(-c(key, value)) |>     mutate(method = methods[i]) |>     as_tibble()   assign(paste0(methods[i], \"_cov\"), out_pivot) } cov <- bind_rows(mget(paste0(methods, \"_cov\")))  cols <- c(   \"AR\" = \"black\",   \"SCP\" = \"yellow\",   \"WCP\" = \"#fa9200\",   \"ACP\" = \"green\",   \"PI\" = \"blue\",   \"PID\" = \"purple\",   \"MCP\" = \"red\" ) cov |>   as_tsibble(index = index, key = c(horizon, method)) |>   mutate(method = factor(method, levels = methods)) |>   ggplot(aes(x = index, y = coverage, group = method, colour = method)) +   geom_line(size = 0.8, alpha = 0.8) +   scale_colour_manual(values = cols) +   geom_hline(yintercept = 0.95, linetype = \"dashed\", colour = \"gray\") +   facet_grid(horizon~.) +   xlab(\"Time\") +   ylab(\"Rolling mean coverage\") +   theme_bw() cov_mean <- lapply(1:length(candidates), function(i) {   out_cov <- get(paste0(candidates[i], \"_cov\"))   out_score <- get(paste0(candidates[i], \"_score\"))   out_mean <- data.frame(       method = methods[i],       covmean = as.vector(out_cov$mean),       winkler = as.vector(out_score[, \"Winkler_95\"]),       msis = as.vector(out_score[,\"MSIS_95\"])     ) |>     as_tibble() |>     rownames_to_column(\"horizon\") |>     mutate(horizon = paste0(\"h=\", horizon))   out_mean }) cov_mean <- do.call(bind_rows, cov_mean) |>   mutate(method = factor(method, levels = methods)) |>   mutate(covdiff = covmean - 0.95) |>   arrange(horizon, method) print(cov_mean, n = nrow(cov_mean)) #> # A tibble: 21 × 6 #>    horizon method covmean winkler  msis   covdiff #>    <chr>   <fct>    <dbl>   <dbl> <dbl>     <dbl> #>  1 h=1     AR       0.954    4.78  4.66  0.00444  #>  2 h=1     SCP      0.95     5.00  4.83  0        #>  3 h=1     WCP      0.955    5.11  4.93  0.00500  #>  4 h=1     ACP      0.949    5.04  4.86 -0.00125  #>  5 h=1     PI       0.944    5.12  4.95 -0.00625  #>  6 h=1     PID      0.939    7.13  6.89 -0.0112   #>  7 h=1     MCP      0.944    5.16  4.98 -0.00625  #>  8 h=2     AR       0.942    6.25  6.09 -0.00784  #>  9 h=2     SCP      0.947    6.53  6.30 -0.00263  #> 10 h=2     WCP      0.955    6.56  6.34  0.00489  #> 11 h=2     ACP      0.950    6.64  6.42 -0.000125 #> 12 h=2     PI       0.946    6.76  6.53 -0.00388  #> 13 h=2     PID      0.941    9.34  9.03 -0.00890  #> 14 h=2     MCP      0.947    6.66  6.44 -0.00263  #> 15 h=3     AR       0.935    6.27  6.11 -0.0146   #> 16 h=3     SCP      0.940    6.64  6.40 -0.0103   #> 17 h=3     WCP      0.948    6.62  6.38 -0.00151  #> 18 h=3     ACP      0.950    6.79  6.55 -0.000251 #> 19 h=3     PI       0.945    6.96  6.72 -0.00528  #> 20 h=3     PID      0.941   10.0   9.71 -0.00905  #> 21 h=3     MCP      0.945    6.90  6.66 -0.00528 for (i in 1:length(candidates)) {   out <- get(paste0(candidates[i], \"_wid\"))   out_pivot <- out$rollmean |>     as_tsibble() |>     mutate(horizon = key, width = value) |>     update_tsibble(key = horizon) |>     select(-c(key, value)) |>     mutate(method = methods[i]) |>     as_tibble()   assign(paste0(methods[i], \"_wid\"), out_pivot) } wid <- bind_rows(mget(paste0(methods, \"_wid\")))  wid |>   as_tsibble(index = index, key = c(horizon, method)) |>   mutate(method = factor(method, levels = methods)) |>   ggplot(aes(x = index, y = width, group = method, colour = method)) +   geom_line(size = 0.8, alpha = 0.8) +   scale_colour_manual(values = cols) +   facet_grid(horizon~.) +   xlab(\"Time\") +   ylab(\"Rolling mean width\") +   theme_bw()"},{"path":"https://xqnwang.github.io/conformalForecast/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xiaoqian Wang. Author, maintainer. Rob Hyndman. Author.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang X, Hyndman R (2024). conformalForecast: Conformal prediction methods multistep-ahead time series forecasting. R package version 0.0.0.9000, https://xqnwang.github.io/conformalForecast/, https://github.com/xqnwang/conformalForecast.","code":"@Manual{,   title = {conformalForecast: Conformal prediction methods for multistep-ahead time series forecasting},   author = {Xiaoqian Wang and Rob Hyndman},   year = {2024},   note = {R package version 0.0.0.9000, https://xqnwang.github.io/conformalForecast/},   url = {https://github.com/xqnwang/conformalForecast}, }"},{"path":"https://xqnwang.github.io/conformalForecast/index.html","id":"conformalforecast","dir":"","previous_headings":"","what":"Conformal prediction methods for multistep-ahead time series forecasting","title":"Conformal prediction methods for multistep-ahead time series forecasting","text":"R package conformalForecast provides methods tools performing multistep-ahead time series forecasting using conformal prediction methods including classical conformal prediction, adaptive conformal prediction, conformal PID control, Multistep-ahead conformal prediction.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Conformal prediction methods for multistep-ahead time series forecasting","text":"can install development version conformalForecast GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"xqnwang/conformalForecast\")"},{"path":"https://xqnwang.github.io/conformalForecast/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Conformal prediction methods for multistep-ahead time series forecasting","text":"basic example shows perform classical conformal prediction method:","code":"library(conformalForecast) library(forecast)  # Simulate time series from an AR(2) model series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Time series cross-validation far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # Classical conformal prediction scpfc <- scp(fc, symmetric = FALSE, ncal = 100, rolling = TRUE)  # Interval forecast accuracy accuracy(scpfc, byhorizon = TRUE)  # Mean coverage coverage(scpfc, window = 500, level = 95)  # Mean and median interval width width(scpfc, window = 500, level = 95, includemedian = TRUE)"},{"path":"https://xqnwang.github.io/conformalForecast/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Conformal prediction methods for multistep-ahead time series forecasting","text":"package free open source software, licensed GPL-3.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/accuracy.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","title":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","text":"Return range summary measures --sample forecast accuracy. x given, function also measures test set forecast accuracy. x given, function produces accuracy measures validation set.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/accuracy.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","text":"","code":"# Default S3 method accuracy(   object,   x,   CV = TRUE,   period = NULL,   measures = interval_measures,   byhorizon = FALSE,   ... )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/accuracy.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","text":"object object class \"cvforecast\" \"cpforecast\". x optional numerical vector containing actual values length mean object. CV TRUE, cross-validation forecast accuracy returned. period seasonal period data. measures list accuracy measure functions compute (point_measures interval_measures). byhorizon TRUE, accuracy measures calculated individual forecast horizon h separately. ... Additional arguments depending specific measure.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/accuracy.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","text":"matrix giving mean --sample forecast accuracy measures.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/accuracy.default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","text":"measures calculated : : Mean Error MAE: Mean Absolute Error MSE: Mean Squared Error RMSE: Root Mean Squared Error MPE: Mean Percentage Error MAPE: Mean Absolute Percentage Error MASE: Mean Absolute Scaled Error RMSSE: Root Mean Squared Scaled Error winkler_score: Winkler Score MSIS: Mean Scaled Interval Score","code":""},{"path":[]},{"path":"https://xqnwang.github.io/conformalForecast/reference/accuracy.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accuracy measures for a cross-validation model and a conformal prediction model — accuracy.default","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting with a rolling window of length 100 far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # Out-of-sample forecast accuracy on validation set accuracy(fc, measures = point_measures, byhorizon = TRUE) #>                  ME       MAE      MSE      RMSE        MPE     MAPE      MASE #> CV h=1 -0.007612522 0.8151254 1.017957 0.8151254  0.7657986 428.6975 0.7580282 #> CV h=2 -0.011786774 1.0713234 1.746509 1.0713234 16.6966949 308.4014 0.9958467 #> CV h=3 -0.008274060 1.0712870 1.776563 1.0712870 15.9913942 298.7024 0.9958713 #>            RMSSE #> CV h=1 0.6077954 #> CV h=2 0.7987764 #> CV h=3 0.7987887 accuracy(fc, measures = interval_measures, level = 95, byhorizon = TRUE) #>        Winkler_95  MSIS_95 #> CV h=1   4.676458 4.347321 #> CV h=2   6.170746 5.736393 #> CV h=3   6.328972 5.882909  # Out-of-sample forecast accuracy on test set accuracy(fc, x = c(1, 0.5, 0), measures = interval_measures,          level = 95, byhorizon = TRUE) #>          Winkler_95  MSIS_95 #> CV h=1     4.676458 4.347321 #> CV h=2     6.170746 5.736393 #> CV h=3     6.328972 5.882909 #> Test h=1   3.892988 3.596556 #> Test h=2   5.263013 4.862260 #> Test h=3   5.330563 4.924667"},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive conformal prediction method — acp","title":"Adaptive conformal prediction method — acp","text":"Compute prediction intervals information applying adaptive conformal prediction (ACP) method.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive conformal prediction method — acp","text":"","code":"acp(   object,   alpha = 1 - 0.01 * object$level,   gamma = 0.005,   symmetric = FALSE,   ncal = 10,   rolling = FALSE,   quantiletype = 1,   na.rm = TRUE,   ... )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive conformal prediction method — acp","text":"object object class \"cvforecast\". must argument x original univariate time series, argument MEAN point forecasts ERROR forecast errors validation set. See results call cvforecast. alpha numeric vector significance levels achieve desired coverage level \\(1-\\alpha\\). gamma step size parameter \\(\\gamma>0\\) \\(\\alpha\\) updating. symmetric TRUE, symmetric nonconformity scores (.e. \\(|e_{t+h|t}|\\)) used. FALSE, asymmetric nonconformity scores (.e. \\(e_{t+h|t}\\)) used, upper bounds lower bounds produced separately. ncal Length calibration set. rolling = FALSE, denotes initial period calibration sets. Otherwise, indicates period every rolling calibration set. rolling TRUE, rolling window strategy adopted form calibration set. Otherwise, expanding window strategy used. quantiletype integer 1 9 determining type quantile estimator used. Types 1 3 discontinuous quantiles, types 4 9 continuous quantiles. See weighted_quantile function ggdist package. na.rm TRUE, corresponding entries sample values removed NA calculating sample quantile. ... arguments passed weighted_quantile function quantile computation.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive conformal prediction method — acp","text":"list class c(\"acp\", \"cpforecast\", \"forecast\") following components: x original time series. series name series x. method character string \"acp\". cp_times number times conformal prediction performed cross-validation. MEAN Point forecasts multivariate time series, \\(h\\)th column holds point forecasts forecast horizon \\(h\\). time index corresponds period forecast produced. ERROR Forecast errors given \\(e_{t+h|t} = y_{t+h}-\\hat{y}_{t+h|t}\\). LOWER list containing lower bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. UPPER list containing upper bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. level confidence values associated prediction intervals. call matched call. model list containing information abouth conformal prediction model. mean included object, components mean, lower, upper also returned, showing information forecasts generated using available observations.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adaptive conformal prediction method — acp","text":"ACP method considers online update: $$\\alpha_{t+h|t}:=\\alpha_{t+h-1|t-1}+\\gamma(\\alpha-\\mathrm{err}_{t|t-h}),$$ individual forecast horizon h, respectively, \\(\\mathrm{err}_{t|t-h}=1\\) \\(s_{t|t-h}>q_{t|t-h}\\), \\(\\mathrm{err}_{t|t-h}=0\\) \\(s_{t|t-h} \\leq q_{t|t-h}\\).","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adaptive conformal prediction method — acp","text":"Gibbs, ., Candes, E. (2021). \"Adaptive conformal inference distribution shift\", Advances Neural Information Processing Systems, 34, 1660–1672.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/acp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adaptive conformal prediction method — acp","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # ACP with asymmetric nonconformity scores and rolling calibration sets acpfc <- acp(fc, symmetric = FALSE, gamma = 0.005, ncal = 100, rolling = TRUE) print(acpfc) #> ACP  #>  #> Call: #>  acp(object = fc, gamma = 0.005, symmetric = FALSE, ncal = 100,   #>      rolling = TRUE)  #>  #>  cp_times = 799 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80      Hi 80     Lo 95       Hi 95 #> 1001     -1.7751855 -2.838942 -0.3890362 -3.916409 -0.01019289 #> 1002     -0.2712581 -2.030470  1.2135450 -2.429294  2.88365546 #> 1003      0.5907807 -1.101664  2.1795586 -1.508596  3.69397326 summary(acpfc) #> ACP  #>  #> Call: #>  acp(object = fc, gamma = 0.005, symmetric = FALSE, ncal = 100,   #>      rolling = TRUE)  #>  #>  cp_times = 799 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80      Hi 80     Lo 95       Hi 95 #> 1001     -1.7751855 -2.838942 -0.3890362 -3.916409 -0.01019289 #> 1002     -0.2712581 -2.030470  1.2135450 -2.429294  2.88365546 #> 1003      0.5907807 -1.101664  2.1795586 -1.508596  3.69397326 #>  #> Cross-validation error measures: #>      ME   MAE   MSE  RMSE     MPE    MAPE  MASE RMSSE Winkler_95 MSIS_95 #> CV 0.01 0.924 1.345 1.038 187.647 359.433 0.902 0.818        Inf     Inf"},{"path":"https://xqnwang.github.io/conformalForecast/reference/conformal.html","id":null,"dir":"Reference","previous_headings":"","what":"Conformal prediction — conformal","title":"Conformal prediction — conformal","text":"function allows specify method used perform conformal prediction.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/conformal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conformal prediction — conformal","text":"","code":"conformal(object, ...)  # S3 method for class 'cvforecast' conformal(object, method = c(\"scp\", \"acp\", \"pid\", \"mcp\"), ...)"},{"path":"https://xqnwang.github.io/conformalForecast/reference/conformal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conformal prediction — conformal","text":"object object class \"cvforecast\". must argument x original univariate time series, argument MEAN point forecasts ERROR forecast errors validation set. See results call cvforecast. ... Additional arguments passed selected conformal method. method character string specifying conformal method applied. Possible options include \"scp\" (scp), \"acp\" (acp), \"pid\" (pid), \"mcp\" (mcp).","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/conformal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conformal prediction — conformal","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # Classical conformal prediction with equal weights scpfc <- conformal(fc, method = \"scp\", symmetric = FALSE, ncal = 100, rolling = TRUE) summary(scpfc) #> SCP  #>  #> Call: #>  scp(object = object, symmetric = FALSE, ncal = 100, rolling = TRUE)  #>  #>  cp_times = 799 (the forward step included)  #>  #> Forecasts of the forward step: #> Cross-validation #>  #> Call: #>  scp(object = object, symmetric = FALSE, ncal = 100, rolling = TRUE)  #>  #>  fit_times =  (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95 #> 1001     -0.5165515 -2.015214 0.910992 -2.615997 1.526088 #> 1002     -0.1132015 -2.043974 1.533047 -3.245547 3.232007 #> 1003      0.2844349 -1.819366 1.857624 -2.714702 3.733580 #>  #> Cross-validation error measures: #>       ME   MAE   MSE  RMSE    MPE    MAPE MASE RMSSE Winkler_95 MSIS_95 #> CV 0.004 0.959 1.452 1.088 33.284 206.539  0.9 0.809      5.813   5.463  # ACP with asymmetric nonconformity scores and rolling calibration sets acpfc <- conformal(fc, method = \"acp\", symmetric = FALSE, gamma = 0.005, ncal = 100, rolling = TRUE) summary(acpfc) #> ACP  #>  #> Call: #>  acp(object = object, gamma = 0.005, symmetric = FALSE, ncal = 100,   #>      rolling = TRUE)  #>  #>  cp_times = 799 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95 #> 1001     -0.5165515 -2.015214 0.910992 -2.556367 1.423885 #> 1002     -0.1132015 -2.374143 1.417650 -3.309647 3.232007 #> 1003      0.2844349 -2.092529 1.792021 -2.948984 4.092585 #>  #> Cross-validation error measures: #>       ME   MAE   MSE  RMSE    MPE    MAPE MASE RMSSE Winkler_95 MSIS_95 #> CV 0.004 0.959 1.452 1.088 33.284 206.539  0.9 0.809        Inf     Inf"},{"path":"https://xqnwang.github.io/conformalForecast/reference/conformalForecast-package.html","id":null,"dir":"Reference","previous_headings":"","what":"conformalForecast: Conformal prediction methods for multistep-ahead time series forecasting — conformalForecast-package","title":"conformalForecast: Conformal prediction methods for multistep-ahead time series forecasting — conformalForecast-package","text":"Methods tools performing multistep-ahead time series forecasting using conformal prediction methods including classical conformal prediction, adaptive conformal prediction, conformal PID control, Multistep-ahead conformal prediction.","code":""},{"path":[]},{"path":"https://xqnwang.github.io/conformalForecast/reference/conformalForecast-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"conformalForecast: Conformal prediction methods for multistep-ahead time series forecasting — conformalForecast-package","text":"Maintainer: Xiaoqian Wang Xiaoqian.Wang@monash.edu (ORCID) Authors: Rob Hyndman Rob.Hyndman@monash.edu (ORCID)","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate interval forecast coverage — coverage","title":"Calculate interval forecast coverage — coverage","text":"Calculate mean coverage ifinn matrix prediction intervals validation set. window NULL, matrix rolling means interval forecast coverage also returned.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate interval forecast coverage — coverage","text":"","code":"coverage(object, ..., level = 95, window = NULL, na.rm = FALSE)"},{"path":"https://xqnwang.github.io/conformalForecast/reference/coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate interval forecast coverage — coverage","text":"object object class \"cvforecast\" \"cpforecast\". ... Additional inputs object missing. level Target confidence level prediction intervals. window NULL, rolling mean matrix coverage also returned. na.rm logical indicating whether NA values stripped rolling mean computation proceeds.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate interval forecast coverage — coverage","text":"list class \"coverage\" following components: mean Mean coverage across validation set. ifinn indicator matrix multivariate time series, \\(h\\)th column holds coverage forecast horizon \\(h\\). time index corresponds period forecast produced. rollmean window NULL, matrix rolling means interval forecast coverage returned.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate interval forecast coverage — coverage","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting with a rolling window of length 100 far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # Mean and rolling mean coverage for interval forecasts on validation set cov_fc <- coverage(fc, level = 95, window = 100) str(cov_fc) #> List of 3 #>  $ mean    : Named num [1:3] 0.933 0.94 0.943 #>   ..- attr(*, \"names\")= chr [1:3] \"h=1\" \"h=2\" \"h=3\" #>  $ ifinn   : Time-Series [1:900, 1:3] from 101 to 1000: TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:3] \"h=1\" \"h=2\" \"h=3\" #>  $ rollmean: Time-Series [1:801, 1:3] from 200 to 1000: 0.91 0.91 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.91 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:3] \"h=1\" \"h=2\" \"h=3\" #>  - attr(*, \"class\")= chr \"coverage\""},{"path":"https://xqnwang.github.io/conformalForecast/reference/cvforecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series cross-validation forecasting — cvforecast","title":"Time series cross-validation forecasting — cvforecast","text":"Compute forecasts information applying forecastfun subsets time series y using rolling forecast origin.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/cvforecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series cross-validation forecasting — cvforecast","text":"","code":"cvforecast(   y,   forecastfun,   h = 1,   level = c(80, 95),   forward = TRUE,   xreg = NULL,   initial = 1,   window = NULL,   ... )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/cvforecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series cross-validation forecasting — cvforecast","text":"y Univariate time series. forecastfun Function return object class \"forecast\". first argument must univariate time series, must argument h forecast horizon argument level confidence level prediction intervals. exogenous predictors used, must also xreg newxreg arguments corresponding training test periods, respectively. h Forecast horizon. level Confidence level prediction intervals. NULL, prediction intervals generated. forward TRUE, final forecast origin forecasting \\(y_T\\). Otherwise, final forecast origin \\(y_{T-1}\\). xreg Exogenous predictor variables passed forecastfun required. size y+forward*h, otherwise, NA padding subsetting applied. initial Initial period time series cross-validation forecasting performed. window Length rolling window. NULL, rolling window used. ... arguments passed forecastfun.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/cvforecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series cross-validation forecasting — cvforecast","text":"list class c(\"cvforecast\", \"forecast\") components: x original time series. series name series x. xreg Exogenous predictor variables used model, applicable. method character string \"cvforecast\". fit_times number times model fitted cross-validation. MEAN Point forecasts multivariate time series, \\(h\\)th column holds point forecasts forecast horizon \\(h\\). time index corresponds period forecast produced. ERROR Forecast errors given \\(e_{t+h|t} = y_{t+h}-\\hat{y}_{t+h|t}\\). LOWER list containing lower bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. UPPER list containing upper bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. level confidence values associated prediction intervals. call matched call. forward Whether forward applied. forward TRUE, components mean, lower, upper, model also returned, showing information final fitted model forecasts using available observations, see e.g. forecast.ets details.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/cvforecast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series cross-validation forecasting — cvforecast","text":"Let y denote time series \\(y_1,\\dots,y_T\\) let \\(t_0\\) denote initial period. Suppose forward = TRUE. window NULL, forecastfun applied successively subset time series \\(y_{1},\\dots,y_t\\), \\(t=t_0,\\dots,T\\), generating forecasts \\(\\hat{y}_{t+1|t},\\dots,\\hat{y}_{t+h|t}\\). window NULL length \\(t_w\\), forecastfun applied successively subset time series \\(y_{t-t_w+1},\\dots,y_{t}\\), \\(t=\\max(t_0, t_w),\\dots,T\\). forward FALSE, last observation used training \\(y_{T-1}\\).","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/cvforecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series cross-validation forecasting — cvforecast","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Example with a rolling window of length 100 far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100) print(fc) #> Cross-validation #>  #> Call: #>  cvforecast(y = series, forecastfun = far2, h = 3, level = c(80,   #>      95), forward = TRUE, initial = 1, window = 100)  #>  #>  fit_times = 901 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95 #> 1001      0.5217675 -0.752827 1.796362 -1.427557 2.471092 #> 1002     -0.1349178 -1.723101 1.453266 -2.563835 2.293999 #> 1003     -0.5149283 -2.103334 1.073477 -2.944185 1.914328 summary(fc) #> Cross-validation #>  #> Call: #>  cvforecast(y = series, forecastfun = far2, h = 3, level = c(80,   #>      95), forward = TRUE, initial = 1, window = 100)  #>  #>  fit_times = 901 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95 #> 1001      0.5217675 -0.752827 1.796362 -1.427557 2.471092 #> 1002     -0.1349178 -1.723101 1.453266 -2.563835 2.293999 #> 1003     -0.5149283 -2.103334 1.073477 -2.944185 1.914328 #>  #> Cross-validation error measures: #>        ME   MAE   MSE  RMSE    MPE    MAPE  MASE RMSSE Winkler_95 MSIS_95 #> CV -0.023 0.971 1.511 1.093 90.064 237.646 0.914 0.822      5.799   5.462  # Example with exogenous predictors far2_xreg <- function(x, h, level, xreg, newxreg) {   Arima(x, order=c(2, 0, 0), xreg = xreg) |>     forecast(h = h, level = level, xreg = newxreg) } fc_xreg <- cvforecast(series, forecastfun = far2_xreg, h = 3, level = c(80, 95),                       forward = TRUE, xreg = matrix(rnorm(2006), ncol = 2, nrow = 1003),                       initial = 1, window = 100)"},{"path":"https://xqnwang.github.io/conformalForecast/reference/interval_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Interval estimate accuracy measures — winkler_score","title":"Interval estimate accuracy measures — winkler_score","text":"Interval estimate accuracy measures","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/interval_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interval estimate accuracy measures — winkler_score","text":"","code":"winkler_score(lower, upper, actual, level = 95, na.rm = TRUE, ...)  MSIS(   lower,   upper,   actual,   train,   level = 95,   period,   d = period == 1,   D = period > 1,   na.rm = TRUE,   ... )  interval_measures"},{"path":"https://xqnwang.github.io/conformalForecast/reference/interval_measures.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interval estimate accuracy measures — winkler_score","text":"object class list length 2.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/interval_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interval estimate accuracy measures — winkler_score","text":"lower vector lower bound interval forecasts either validation test data. upper vector upper bound interval forecasts either validation test data. actual vector responses matching forecasts. level level forecast interval. na.rm TRUE, remove missing values calculating accuracy measure. ... Additional arguments measure. train vector responses used train model. period seasonal period data. d response model include first difference? D response model include seasonal difference?","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/lagmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lags or leads of a matrix — lagmatrix","title":"Create lags or leads of a matrix — lagmatrix","text":"Find shifted version matrix, adjusting time base backward (lagged) forward (leading) specified number observations column.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/lagmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lags or leads of a matrix — lagmatrix","text":"","code":"lagmatrix(x, lag)"},{"path":"https://xqnwang.github.io/conformalForecast/reference/lagmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lags or leads of a matrix — lagmatrix","text":"x matrix multivariate time series. lag vector lags (positive values) leads (negative values) length equal number columns x.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/lagmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lags or leads of a matrix — lagmatrix","text":"matrix class size x.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/lagmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lags or leads of a matrix — lagmatrix","text":"","code":"x <- matrix(rnorm(20), nrow = 5, ncol = 4)  # Create lags of a matrix lagmatrix(x, c(0, 1, 2, 3)) #>            [,1]       [,2]        [,3]       [,4] #> [1,] -0.2214920         NA          NA         NA #> [2,] -0.5327543  1.8372813          NA         NA #> [3,] -0.2527562 -0.5168990 -0.08607230         NA #> [4,]  0.5297525  0.4238086 -0.02822395 -0.6379241 #> [5,] -0.3590142 -1.4433878 -1.12939293  0.7739003 #> attr(,\"class\") #> [1] \"matrix\" \"array\"   # Create leads of a matrix lagmatrix(x, c(0, -1, -2, -3)) #>            [,1]       [,2]       [,3]       [,4] #> [1,] -0.2214920 -0.5168990 -1.1293929  0.4635259 #> [2,] -0.5327543  0.4238086 -0.7501841 -1.3311060 #> [3,] -0.2527562 -1.4433878 -0.3077862         NA #> [4,]  0.5297525 -1.5429724         NA         NA #> [5,] -0.3590142         NA         NA         NA #> attr(,\"class\") #> [1] \"matrix\" \"array\""},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Multistep-ahead conformal prediction method — mcp","title":"Multistep-ahead conformal prediction method — mcp","text":"Compute prediction intervals information applying multistep-ahead conformal prediction (MCP) method. method can deal asymmetric nonconformity scores, .e., forecast errors.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multistep-ahead conformal prediction method — mcp","text":"","code":"mcp(   object,   alpha = 1 - 0.01 * object$level,   ncal = 10,   rolling = FALSE,   integrate = TRUE,   scorecast = TRUE,   lr = 0.1,   Tg = NULL,   delta = NULL,   Csat = 2/pi * (ceiling(log(Tg) * delta) - 1/log(Tg)),   KI = max(abs(object$errors), na.rm = TRUE),   ... )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multistep-ahead conformal prediction method — mcp","text":"object object class \"cvforecast\". must argument x original univariate time series, argument MEAN point forecasts ERROR forecast errors validation set. See results call cvforecast. alpha numeric vector significance levels achieve desired coverage level \\(1-\\alpha\\). ncal Length burn-period training scorecaster. rolling = TRUE, also used length trailing windows learning rate calculation windows calibration set. rolling = FALSE, used initial period calibration sets trailing windows learning rate calculation. rolling TRUE, rolling window strategy adopted form trailing window learning rate calculation calibration set scorecaster applicable. Otherwise, expanding window strategy used. integrate TRUE, error integration included update process. scorecast TRUE, scorecasting included update process. lr Initial learning rate used quantile tracking. Tg time set achieve target absolute coverage guarantee . delta target absolute coverage guarantee set \\(1-\\alpha-\\delta\\). Csat positive constant ensuring time Tg, absolute guarantee least \\(1-\\alpha-\\delta\\) coverage. KI positive constant place integrator scale scores. ... arguments passed function.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multistep-ahead conformal prediction method — mcp","text":"list class c(\"mcp\", \"cpforecast\", \"forecast\") following components: x original time series. series name series x. method character string \"mcp\". cp_times number times conformal prediction performed cross-validation. MEAN Point forecasts multivariate time series, \\(h\\)th column holds point forecasts forecast horizon \\(h\\). time index corresponds period forecast produced. ERROR Forecast errors given \\(e_{t+h|t} = y_{t+h}-\\hat{y}_{t+h|t}\\). LOWER list containing lower bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. UPPER list containing upper bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. level confidence values associated prediction intervals. call matched call. model list containing information abouth conformal prediction model. mean included object, components mean, lower, upper also returned, showing information test set forecasts generated using available observations.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multistep-ahead conformal prediction method — mcp","text":"Similar PID method, MCP method also integrates three modules (P, , D) form final iteration. However, instead performing conformal prediction individual forecast horizon h separately, MCP employs combination MA\\((h-1)\\) model linear regression model \\(e_{t+h|t}\\) \\(e_{t+h-1|t},\\dots,e_{t+1|t}\\) scorecaster. allows MCP method capture relationship \\(h\\)-step ahead forecast error past errors.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multistep-ahead conformal prediction method — mcp","text":"Wang, X., Hyndman, R. J. (2024). \"Online conformal inference multi-step time series forecasting\", arXiv preprint arXiv:2410.13115.","code":""},{"path":[]},{"path":"https://xqnwang.github.io/conformalForecast/reference/mcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multistep-ahead conformal prediction method — mcp","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # MCP setup Tg <- 1000; delta <- 0.01 Csat <- 2 / pi * (ceiling(log(Tg) * delta) - 1 / log(Tg)) KI <- 2 lr <- 0.1  # MCP with integrator and scorecaster mcpfc <- mcp(fc, ncal = 100, rolling = TRUE,              integrate = TRUE, scorecast = TRUE,              lr = lr, KI = KI, Csat = Csat) print(mcpfc) #> MCP  #>  #> Call: #>  mcp(object = fc, ncal = 100, rolling = TRUE, integrate = TRUE,   #>      scorecast = TRUE, lr = lr, Csat = Csat, KI = KI)  #>  #>  cp_times = 898 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80     Hi 80     Lo 95    Hi 95 #> 1001      0.4017819 -1.008844 1.8922847 -1.697094 2.847633 #> 1002     -0.4626032 -2.105623 0.7519256 -3.438290 1.268516 #> 1003     -0.6132015 -2.668811 0.7953972 -3.570173 1.515044 summary(mcpfc) #> MCP  #>  #> Call: #>  mcp(object = fc, ncal = 100, rolling = TRUE, integrate = TRUE,   #>      scorecast = TRUE, lr = lr, Csat = Csat, KI = KI)  #>  #>  cp_times = 898 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast     Lo 80     Hi 80     Lo 95    Hi 95 #> 1001      0.4017819 -1.008844 1.8922847 -1.697094 2.847633 #> 1002     -0.4626032 -2.105623 0.7519256 -3.438290 1.268516 #> 1003     -0.6132015 -2.668811 0.7953972 -3.570173 1.515044 #>  #> Cross-validation error measures: #>       ME   MAE   MSE  RMSE    MPE    MAPE  MASE RMSSE Winkler_95 MSIS_95 #> CV 0.002 0.908 1.293 1.025 139.64 242.222 0.922 0.839      5.548   5.646"},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":null,"dir":"Reference","previous_headings":"","what":"Conformal PID control method — pid","title":"Conformal PID control method — pid","text":"Compute prediction intervals information applying conformal PID control method.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conformal PID control method — pid","text":"","code":"pid(   object,   alpha = 1 - 0.01 * object$level,   symmetric = FALSE,   ncal = 10,   rolling = FALSE,   integrate = TRUE,   scorecast = !symmetric,   scorecastfun = NULL,   lr = 0.1,   Tg = NULL,   delta = NULL,   Csat = 2/pi * (ceiling(log(Tg) * delta) - 1/log(Tg)),   KI = max(abs(object$errors), na.rm = TRUE),   ... )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conformal PID control method — pid","text":"object object class \"cvforecast\". must argument x original univariate time series, argument MEAN point forecasts ERROR forecast errors validation set. See results call cvforecast. alpha numeric vector significance levels achieve desired coverage level \\(1-\\alpha\\). symmetric TRUE, symmetric nonconformity scores (.e. \\(|e_{t+h|t}|\\)) used. FALSE, asymmetric nonconformity scores (.e. \\(e_{t+h|t}\\)) used, upper bounds lower bounds produced separately. ncal Length burn-period training scorecaster. rolling = TRUE, also used length trailing windows learning rate calculation windows calibration set. rolling = FALSE, used initial period calibration sets trailing windows learning rate calculation. rolling TRUE, rolling window strategy adopted form trailing window learning rate calculation calibration set scorecaster applicable. Otherwise, expanding window strategy used. integrate TRUE, error integration included update process. scorecast TRUE, scorecasting included update process, scorecastfun given. scorecastfun scorecaster function return object class forecast. first argument must univariate time series, must argument h forecast horizon. lr Initial learning rate used quantile tracking. Tg time set achieve target absolute coverage guarantee . delta target absolute coverage guarantee set \\(1-\\alpha-\\delta\\). Csat positive constant ensuring time Tg, absolute guarantee least \\(1-\\alpha-\\delta\\) coverage. KI positive constant place integrator scale scores. ... arguments passed scorecastfun function.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conformal PID control method — pid","text":"list class c(\"pid\", \"cpforecast\", \"forecast\") following components: x original time series. series name series x. method character string \"pid\". cp_times number times conformal prediction performed cross-validation. MEAN Point forecasts multivariate time series, \\(h\\)th column holds point forecasts forecast horizon \\(h\\). time index corresponds period forecast produced. ERROR Forecast errors given \\(e_{t+h|t} = y_{t+h}-\\hat{y}_{t+h|t}\\). LOWER list containing lower bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. UPPER list containing upper bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. level confidence values associated prediction intervals. call matched call. model list containing information abouth conformal prediction model. mean included object, components mean, lower, upper also returned, showing information forecasts generated using available observations.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conformal PID control method — pid","text":"PID method combines three modules make final iteration: $$q_{t+h|t}=\\underbrace{q_{t+h-1|t-1} + \\eta(\\mathrm{err}_{t|t-h}-\\alpha)}_{\\mathrm{P}}+\\underbrace{r_t\\left(\\sum_{=1}^t\\left(\\mathrm{err}_{|-h}-\\alpha\\right)\\right)}_{\\mathrm{}}+\\underbrace{\\hat{s}_{t+h|t}}_{\\mathrm{D}}$$ individual forecast horizon h, respectively, Quantile tracking part (P) \\(q_{t+h-1|t-1} + \\eta(\\mathrm{err}_{t|t-h}-\\alpha)\\), \\(q_{1+h|1}\\) set 0 without loss generality, \\(\\mathrm{err}_{t|t-h}=1\\) \\(s_{t|t-h}>q_{t|t-h}\\), \\(\\mathrm{err}_{t|t-h}=0\\) \\(s_{t|t-h} \\leq q_{t|t-h}\\). Error integration part () \\(r_t\\left(\\sum_{=1}^t\\left(\\mathrm{err}_{|-h}-\\alpha\\right)\\right)\\). use nonlinear saturation function \\(r_t(x)=K_{\\mathrm{}} \\tan \\left(x \\log (t) /\\left(t C_{\\text {sat }}\\right)\\right)\\), set \\(\\tan (x)=\\operatorname{sign}(x) \\cdot \\infty\\) \\(x \\notin[-\\pi / 2, \\pi / 2]\\), \\(C_{\\text {sat }}, K_{\\mathrm{}}>0\\) constants choose heuristically. Scorecasting part (D) \\(\\hat{s}_{t+h|t}\\) forecast generated training scorecaster based nonconformity scores available time \\(t\\).","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conformal PID control method — pid","text":"Angelopoulos, ., Candes, E., Tibshirani, R. J. (2024). \"Conformal PID control time series prediction\", Advances Neural Information Processing Systems, 36, 23047–23074.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/pid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conformal PID control method — pid","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # PID setup Tg <- 1000; delta <- 0.01 Csat <- 2 / pi * (ceiling(log(Tg) * delta) - 1 / log(Tg)) KI <- 2 lr <- 0.1  # PID without scorecaster pidfc_nsf <- pid(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,                  integrate = TRUE, scorecast = FALSE,                  lr = lr, KI = KI, Csat = Csat) print(pidfc_nsf) #> PID  #>  #> Call: #>  pid(object = fc, symmetric = FALSE, ncal = 100, rolling = TRUE,   #>      integrate = TRUE, scorecast = FALSE, lr = lr, Csat = Csat,   #>      KI = KI)  #>  #>  cp_times = 898 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast      Lo 80     Hi 80     Lo 95    Hi 95 #> 1001    0.264457085 -0.8488525 0.9538264 -1.496723 2.524613 #> 1002    0.232331391 -1.0526208 1.9153472 -2.058756 3.493363 #> 1003   -0.003700809 -1.6744563 1.3092852 -2.192779 2.643844 summary(pidfc_nsf) #> PID  #>  #> Call: #>  pid(object = fc, symmetric = FALSE, ncal = 100, rolling = TRUE,   #>      integrate = TRUE, scorecast = FALSE, lr = lr, Csat = Csat,   #>      KI = KI)  #>  #>  cp_times = 898 (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast      Lo 80     Hi 80     Lo 95    Hi 95 #> 1001    0.264457085 -0.8488525 0.9538264 -1.496723 2.524613 #> 1002    0.232331391 -1.0526208 1.9153472 -2.058756 3.493363 #> 1003   -0.003700809 -1.6744563 1.3092852 -2.192779 2.643844 #>  #> Cross-validation error measures: #>       ME   MAE   MSE  RMSE     MPE    MAPE  MASE RMSSE Winkler_95 MSIS_95 #> CV 0.014 0.961 1.444 1.079 182.346 263.405 0.922 0.814      6.053   5.898  # PID with a Naive model for the scorecaster naivefun <- function(x, h) {   naive(x) |> forecast(h = h) } pidfc <- pid(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,              integrate = TRUE, scorecast = TRUE, scorecastfun = naivefun,              lr = lr, KI = KI, Csat = Csat)"},{"path":"https://xqnwang.github.io/conformalForecast/reference/point_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Point estimate accuracy measures — ME","title":"Point estimate accuracy measures — ME","text":"Point estimate accuracy measures","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/point_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point estimate accuracy measures — ME","text":"","code":"ME(resid, na.rm = TRUE)  MAE(resid, na.rm = TRUE, ...)  MSE(resid, na.rm = TRUE, ...)  RMSE(resid, na.rm = TRUE, ...)  MPE(resid, actual, na.rm = TRUE, ...)  MAPE(resid, actual, na.rm = TRUE, ...)  MASE(   resid,   train,   demean = FALSE,   na.rm = TRUE,   period,   d = period == 1,   D = period > 1,   ... )  RMSSE(   resid,   train,   demean = FALSE,   na.rm = TRUE,   period,   d = period == 1,   D = period > 1,   ... )  point_measures"},{"path":"https://xqnwang.github.io/conformalForecast/reference/point_measures.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Point estimate accuracy measures — ME","text":"object class list length 8.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/point_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point estimate accuracy measures — ME","text":"resid vector residuals either validation test data. na.rm TRUE, remove missing values calculating accuracy measure. ... Additional arguments measure. actual vector responses matching forecasts. train vector responses used train model. demean response demeaned (MASE RMSSE)? period seasonal period data. d response model include first difference? D response model include seasonal difference?","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/scp.html","id":null,"dir":"Reference","previous_headings":"","what":"Classical split conformal prediction method — scp","title":"Classical split conformal prediction method — scp","text":"Compute prediction intervals information applying classical split conformal prediction (SCP) method.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/scp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classical split conformal prediction method — scp","text":"","code":"scp(   object,   alpha = 1 - 0.01 * object$level,   symmetric = FALSE,   ncal = 10,   rolling = FALSE,   quantiletype = 1,   weightfun = NULL,   kess = FALSE,   update = FALSE,   na.rm = TRUE,   ... )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/scp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classical split conformal prediction method — scp","text":"object object class \"cvforecast\". must argument x original univariate time series, argument MEAN point forecasts ERROR forecast errors validation set. See results call cvforecast. alpha numeric vector significance levels achieve desired coverage level \\(1-\\alpha\\). symmetric TRUE, symmetric nonconformity scores (.e. \\(|e_{t+h|t}|\\)) used. FALSE, asymmetric nonconformity scores (.e. \\(e_{t+h|t}\\)) used, upper bounds lower bounds produced separately. ncal Length calibration set. rolling = FALSE, denotes initial period calibration sets. Otherwise, indicates period every rolling calibration set. rolling TRUE, rolling window strategy adopted form calibration set. Otherwise, expanding window strategy used. quantiletype integer 1 9 determining type quantile estimator used. Types 1 3 discontinuous quantiles, types 4 9 continuous quantiles. See weighted_quantile function ggdist package. weightfun Function return vector weights used sample quantile computation. first argument must integer indicating number observations weights generated. NULL, equal weights used sample quantile computation. Currently, non-data-dependent weights supported. kess TRUE, Kish's effective sample size used sample quantile computation. update TRUE, function compatible update function, allowing easy updates conformal prediction. na.rm TRUE, corresponding entries sample values weights removed either NA calculating sample quantile. ... arguments passed weightfun.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/scp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classical split conformal prediction method — scp","text":"list class c(\"scp\", \"cvforecast\", \"forecast\") following components: x original time series. series name series x. xreg Exogenous predictor variables used, applicable. method character string \"scp\". cp_times number times conformal prediction performed cross-validation. MEAN Point forecasts multivariate time series, \\(h\\)th column holds point forecasts forecast horizon \\(h\\). time index corresponds period forecast produced. ERROR Forecast errors given \\(e_{t+h|t} = y_{t+h}-\\hat{y}_{t+h|t}\\). LOWER list containing lower bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. UPPER list containing upper bounds prediction intervals level. element within list multivariate time series dimensional characteristics MEAN. level confidence values associated prediction intervals. call matched call. model list containing detailed information cvforecast conformal models. mean included object, components mean, lower, upper also returned, showing information test set forecasts generated using available observations.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/scp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classical split conformal prediction method — scp","text":"Consider vector \\(s_{t+h|t}\\) contains nonconformity scores \\(h\\)-step-ahead forecasts. symmetric TRUE, \\(s_{t+h|t}=|e_{t+h|t}|\\). rolling FALSE, \\((1-\\alpha)\\)-quantile \\(\\hat{q}_{t+h|t}\\) computed successively expanding calibration sets \\(s_{1+h|1},\\dots,s_{t|t-h}\\), \\(t=\\mathrm{ncal}+h,\\dots,T\\). prediction intervals \\([\\hat{y}_{t+h|t}-\\hat{q}_{t+h|t}, \\hat{y}_{t+h|t}+\\hat{q}_{t+h|t}]\\). rolling TRUE, calibration sets length ncal. symmetric FALSE, \\(s_{t+h|t}^{u}=e_{t+h|t}\\) upper interval bounds \\(s_{t+h|t}^{l} = -e_{t+h|t}\\) lower bounds. Instead computing \\((1-\\alpha)\\)-quantile, \\((1-\\alpha/2)\\)-quantiles lower bound (\\(\\hat{q}_{t+h|t}^{l}\\)) upper bound (\\(\\hat{q}_{t+h|t}^{u}\\)) calculated based nonconformity scores, respectively. prediction intervals \\([\\hat{y}_{t+h|t}-\\hat{q}_{t+h|t}^{l}, \\hat{y}_{t+h|t}+\\hat{q}_{t+h|t}^{u}]\\).","code":""},{"path":[]},{"path":"https://xqnwang.github.io/conformalForecast/reference/scp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classical split conformal prediction method — scp","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # Classical conformal prediction with equal weights scpfc <- scp(fc, symmetric = FALSE, ncal = 100, rolling = TRUE) print(scpfc) #> SCP  #>  #> Call: #>  scp(object = fc, symmetric = FALSE, ncal = 100, rolling = TRUE)  #>  #>  cp_times = 799 (the forward step included)  #>  #> Forecasts of the forward step: #> Cross-validation #>  #> Call: #>  scp(object = fc, symmetric = FALSE, ncal = 100, rolling = TRUE)  #>  #>  fit_times =  (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast      Lo 80    Hi 80     Lo 95    Hi 95 #> 1001      1.2540418 -0.1490929 2.520996 -1.065434 3.817075 #> 1002      0.3784289 -1.2282025 2.186605 -2.834616 3.380624 #> 1003     -0.3086171 -1.8457568 1.494619 -3.414272 2.618403 summary(scpfc) #> SCP  #>  #> Call: #>  scp(object = fc, symmetric = FALSE, ncal = 100, rolling = TRUE)  #>  #>  cp_times = 799 (the forward step included)  #>  #> Forecasts of the forward step: #> Cross-validation #>  #> Call: #>  scp(object = fc, symmetric = FALSE, ncal = 100, rolling = TRUE)  #>  #>  fit_times =  (the forward step included)  #>  #> Forecasts of the forward step: #>      Point Forecast      Lo 80    Hi 80     Lo 95    Hi 95 #> 1001      1.2540418 -0.1490929 2.520996 -1.065434 3.817075 #> 1002      0.3784289 -1.2282025 2.186605 -2.834616 3.380624 #> 1003     -0.3086171 -1.8457568 1.494619 -3.414272 2.618403 #>  #> Cross-validation error measures: #>        ME   MAE  MSE RMSE    MPE    MAPE  MASE RMSSE Winkler_95 MSIS_95 #> CV -0.011 0.958 1.46 1.08 42.611 228.563 0.934 0.837      5.944   5.731  # Classical conformal prediction with exponential weights expweight <- function(n) {   0.99^{n+1-(1:n)} } scpfc_exp <- scp(fc, symmetric = FALSE, ncal = 100, rolling = TRUE,                  weightfun = expweight, kess = TRUE)"},{"path":"https://xqnwang.github.io/conformalForecast/reference/width.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate interval forecast width — width","title":"Calculate interval forecast width — width","text":"Calculate mean width prediction intervals validation set. window NULL, matrix rolling means interval width also returned. includemedian TRUE, information median interval width returned.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate interval forecast width — width","text":"","code":"width(   object,   ...,   level = 95,   includemedian = FALSE,   window = NULL,   na.rm = FALSE )"},{"path":"https://xqnwang.github.io/conformalForecast/reference/width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate interval forecast width — width","text":"object object class \"cvforecast\" \"cpforecast\". ... Additional inputs object missing. level Target confidence level prediction intervals. includemedian TRUE, median interval width also returned. window NULL, rolling mean (rolling median applicable) matrix interval width also returned. na.rm logical indicating whether NA values stripped rolling mean rolling median computation proceeds.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate interval forecast width — width","text":"list class \"width\" following components: width Forecast interval width multivariate time series, \\(h\\)th column holds interval width forecast horizon \\(h\\). time index corresponds period forecast produced. mean Mean interval width across validation set. rollmean window NULL, matrix rolling means interval width returned. median Median interval width across validation set. rollmedian window NULL, matrix rolling medians interval width returned.","code":""},{"path":"https://xqnwang.github.io/conformalForecast/reference/width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate interval forecast width — width","text":"","code":"# Simulate time series from an AR(2) model library(forecast) series <- arima.sim(n = 1000, list(ar = c(0.8, -0.5)), sd = sqrt(1))  # Cross-validation forecasting with a rolling window of length 100 far2 <- function(x, h, level) {   Arima(x, order = c(2, 0, 0)) |>     forecast(h = h, level) } fc <- cvforecast(series, forecastfun = far2, h = 3, level = c(80, 95),                  forward = TRUE, initial = 1, window = 100)  # Mean and rolling mean width for interval forecasts on validation set wid_fc <- width(fc, level = 95, window = 100) str(wid_fc) #> List of 3 #>  $ width   : Time-Series [1:903, 1:3] from 101 to 1003: 4.12 4.26 4.23 4.21 4.21 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:3] \"h=1\" \"h=2\" \"h=3\" #>  $ mean    : Named num [1:3] 3.99 5.14 5.22 #>   ..- attr(*, \"names\")= chr [1:3] \"h=1\" \"h=2\" \"h=3\" #>  $ rollmean: Time-Series [1:804, 1:3] from 200 to 1003: 4.21 4.21 4.21 4.21 4.21 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:3] \"h=1\" \"h=2\" \"h=3\" #>  - attr(*, \"class\")= chr \"width\""},{"path":"https://xqnwang.github.io/conformalForecast/news/index.html","id":"conformalforecast-development-version","dir":"Changelog","previous_headings":"","what":"conformalForecast (development version)","title":"conformalForecast (development version)","text":"Main functions conformal prediction methods","code":""}]
